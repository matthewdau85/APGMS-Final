generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id         String         @id @default(cuid())
  name       String
  createdAt  DateTime       @default(now())
  deletedAt  DateTime?
  users      User[]
  lines      BankLine[]
  tombstones OrgTombstone[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id              String   @id @default(cuid())
  org             Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  date            DateTime
  amount          Decimal   // consider scale/precision if needed, e.g. @db.Decimal(18, 2) for Postgres
  payeeCiphertext String
  payeeKid        String
  descCiphertext  String
  descKid         String
  createdAt       DateTime  @default(now())

  // For idempotency:
  idempotencyKey  String?   // you can also constrain length per-DB, e.g. @db.VarChar(128) on Postgres

  @@unique([orgId, idempotencyKey])   // replays with same key hit this
  @@index([orgId])                    // helpful for org queries
}


model OrgTombstone {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  payload   Json
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  actorId   String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([orgId, createdAt])
  @@index([actorId, createdAt])
}
