generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// =========================
// Enums
// =========================

enum AccountType {
  ASSET
  LIABILITY
  INCOME
  EXPENSE
  EQUITY
}

enum AccountSubtype {
  BANK
  PAYGW_BUFFER
  GST_BUFFER
  CLEARING
  SUSPENSE
  RECEIVABLE
  PAYABLE
}

enum JournalType {
  PAYROLL_HOLD
  POS_GST
  BANK_SETTLEMENT
  BAS_RELEASE
  ADJUSTMENT
  REVERSAL
}

enum AlertStatus {
  OPEN
  ACKED
  CLOSED
}

// =========================
// Payroll domain
// =========================
//
// IDs are String to align with current Org/User tables.
// baseRate, superRate etc. use Decimal with @db.Decimal now.
// =========================

model Employee {
  id                 String    @id
  orgId              String
  org                Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)

  fullNameCiphertext String
  fullNameKid        String
  tfnProvided        Boolean   @default(false)

  // "full_time" | "part_time" | "contractor" | etc.
  employmentType     String

  // hourly rate or derived salary rate
  baseRate           Decimal   @db.Decimal(12, 2) @default("0")

  // superannuation %, e.g. 11.00
  superRate          Decimal   @db.Decimal(5, 2)  @default("11.0")

  status             String    @default("active")
  createdAt          DateTime  @default(now())

  payslips           Payslip[]

  @@index([orgId], map: "Employee_orgId_idx")
}

model PayRun {
  id           String    @id
  orgId        String
  org          Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)

  periodStart  DateTime
  periodEnd    DateTime
  paymentDate  DateTime

  // "draft" | "committed"
  status       String    @default("draft")

  createdAt    DateTime  @default(now())

  payslips     Payslip[]

  @@index([orgId], map: "PayRun_orgId_idx")
}

model Payslip {
  id              String    @id

  payRunId        String
  payRun          PayRun    @relation(fields: [payRunId], references: [id], onDelete: Cascade)

  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  grossPay        Decimal   @db.Decimal(12, 2)
  paygWithheld    Decimal   @db.Decimal(12, 2)
  superAccrued    Decimal   @db.Decimal(12, 2)

  notesCiphertext String
  notesKid        String

  createdAt       DateTime  @default(now())

  @@index([payRunId], map: "Payslip_payRunId_idx")
  @@index([employeeId], map: "Payslip_employeeId_idx")
}

// =========================
// Core ledger / compliance
// =========================
//
// Production ledger covering:
// - GST collection
// - PAYGW / STSL accrual
// - BAS evidence trails
// =========================

model Organization {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  createdAt   DateTime          @default(now())

  accounts    Account[]
  journals    Journal[]
}

model Account {
  id            String            @id @default(uuid()) @db.Uuid
  orgId         String            @db.Uuid
  code          String
  name          String
  type          AccountType
  subtype       AccountSubtype?
  currency      String            @default("AUD")
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())

  postings      Posting[]
  balances      BalanceSnapshot[]

  organization  Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, code])
  @@index([orgId, subtype])
}

model Journal {
  id            String        @id @default(uuid()) @db.Uuid
  orgId         String        @db.Uuid
  seq           BigInt        @db.BigInt
  type          JournalType
  eventId       String
  dedupeId      String
  occurredAt    DateTime
  recordedAt    DateTime      @default(now())
  source        String
  description   String?
  hash          String?
  prevHash      String?

  postings      Posting[]
  organization  Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, dedupeId])
  @@unique([orgId, seq])
  @@index([orgId, occurredAt])
}

model Posting {
  id          String   @id @default(uuid()) @db.Uuid
  orgId       String   @db.Uuid
  journalId   String   @db.Uuid
  accountId   String   @db.Uuid
  amountCents BigInt   @db.BigInt
  memo        String?

  journal     Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([orgId, accountId])
  @@index([orgId, journalId])
}

model BalanceSnapshot {
  id            String   @id @default(uuid()) @db.Uuid
  orgId         String   @db.Uuid
  accountId     String   @db.Uuid
  asOfSeq       BigInt   @db.BigInt
  balanceCents  BigInt   @db.BigInt
  createdAt     DateTime @default(now())

  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([orgId, accountId, asOfSeq])
}

model EventEnvelope {
  id            String   @id
  orgId         String   @db.Uuid
  eventType     String
  key           String
  ts            DateTime
  schemaVersion String
  source        String
  traceId       String?
  payload       Json
  processedAt   DateTime?
  status        String   @default("processed")
  error         String?

  @@index([orgId, ts])
}

model BankTransaction {
  id               String   @id @default(uuid()) @db.Uuid
  orgId            String   @db.Uuid
  extRef           String?
  accountName      String
  txDate           DateTime
  amountCents      BigInt   @db.BigInt
  description      String?
  matchedJournalId String?

  @@index([orgId, txDate])
}

model GstTransaction {
  id          String   @id @default(uuid()) @db.Uuid
  orgId       String   @db.Uuid
  sourceRef   String?
  txDate      DateTime
  netCents    BigInt   @db.BigInt
  gstCents    BigInt   @db.BigInt
  code        String
  basPeriodId String?

  @@index([orgId, txDate])
}

model PayrollItem {
  id             String   @id @default(uuid()) @db.Uuid
  orgId          String   @db.Uuid
  employeeId     String
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  grossCents     BigInt   @db.BigInt
  paygwCents     BigInt   @db.BigInt
  stslCents      BigInt   @db.BigInt
  journalId      String?

  @@index([orgId, employeeId])
}

model BasPeriod {
  id         String   @id @default(uuid()) @db.Uuid
  orgId      String   @db.Uuid
  start      DateTime
  end        DateTime
  status     String   @default("open")
  readyAt    DateTime?
  releasedAt DateTime?
  lodgedAt   DateTime?
  evidenceId String?

  @@unique([orgId, start, end])
}

model ReconciliationAlert {
  id         String      @id @default(uuid()) @db.Uuid
  orgId      String      @db.Uuid
  kind       String
  openedAt   DateTime    @default(now())
  status     AlertStatus @default(OPEN)
  details    Json
  resolvedAt DateTime?

  @@index([orgId, status])
}

model EvidenceArtifact {
  id        String   @id @default(uuid()) @db.Uuid
  orgId     String   @db.Uuid
  kind      String
  wormUri   String
  sha256    String
  payload   Json?
  createdAt DateTime @default(now())

  @@index([orgId, kind])
}

model IdempotencyKey {
  id          String   @id @default(uuid()) @db.Uuid
  orgId       String   @db.Uuid
  key         String
  firstSeenAt DateTime @default(now())
  resource    String?
  resourceId  String?

  @@unique([orgId, key])
}

// =========================
// Legacy models still used by the live Fastify API
// =========================
//
// These match what the running api-gateway expects today
// (auth/login, /users, /bank-lines, /admin/export/:orgId).
// =========================

model Org {
  id         String         @id @default(cuid())
  name       String
  createdAt  DateTime       @default(now())
  deletedAt  DateTime?

  users      User[]
  lines      BankLine[]
  tombstones OrgTombstone[]
  alerts     Alert[]
  basCycles  BasCycle[]
  designatedAccounts DesignatedAccount[]
  designatedTransfers DesignatedTransfer[]
  paymentPlanRequests PaymentPlanRequest[]
  regulatorSessions RegulatorSession[]
  monitoringSnapshots MonitoringSnapshot[]

  // payroll backrefs
  employees  Employee[]
  payRuns    PayRun[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      String   @default("admin")
  mfaEnabled Boolean @default(false)

  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model Alert {
  id             String   @id @default(cuid())
  org            Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId          String
  type           String
  severity       String
  message        String
  createdAt      DateTime @default(now())
  resolvedAt     DateTime?
  resolutionNote String?

  @@index([orgId, createdAt])
  @@index([orgId, resolvedAt])
}

model BasCycle {
  id            String   @id @default(cuid())
  org           Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  periodStart   DateTime
  periodEnd     DateTime
  paygwRequired Decimal
  paygwSecured  Decimal
  gstRequired   Decimal
  gstSecured    Decimal
  overallStatus String
  lodgedAt      DateTime?
  paymentPlanRequests PaymentPlanRequest[]

  @@index([orgId, periodStart, periodEnd])
  @@index([orgId, lodgedAt])
}

model DesignatedAccount {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  type      String
  balance   Decimal  @default(0)
  updatedAt DateTime @default(now())

  transfers DesignatedTransfer[]

  @@index([orgId, type])
}

model DesignatedTransfer {
  id        String             @id @default(cuid())
  org       Org                @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  account   DesignatedAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  amount    Decimal
  source    String
  createdAt DateTime           @default(now())

  @@index([orgId, accountId, createdAt])
}

model PaymentPlanRequest {
  id          String    @id @default(cuid())
  org         Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  basCycle    BasCycle  @relation(fields: [basCycleId], references: [id], onDelete: Cascade)
  basCycleId  String
  requestedAt DateTime  @default(now())
  reason      String
  status      String    @default("SUBMITTED")
  detailsJson Json
  resolvedAt  DateTime?

  @@index([orgId, basCycleId])
  @@index([orgId, status])
}

model BankLine {
  id              String   @id @default(cuid())
  org             Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  date            DateTime
  amount          Decimal
  payeeCiphertext String
  payeeKid        String
  descCiphertext  String
  descKid         String
  createdAt       DateTime @default(now())
  idempotencyKey  String?

  @@unique([orgId, idempotencyKey])
  @@index([orgId])
}

model OrgTombstone {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  payload   Json
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  actorId   String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  hash      String
  prevHash  String?

  @@index([orgId, createdAt])
  @@index([actorId, createdAt])
}

model RegulatorSession {
  id         String   @id @default(cuid())
  org        Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId      String
  tokenHash  String
  issuedAt   DateTime  @default(now())
  expiresAt  DateTime
  lastUsedAt DateTime?
  revokedAt  DateTime?
  createdAt  DateTime  @default(now())

  @@index([orgId, createdAt])
  @@index([orgId, expiresAt])
}

model MonitoringSnapshot {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  type      String
  payload   Json
  createdAt DateTime @default(now())

  @@index([orgId, createdAt])
  @@index([orgId, type, createdAt])
}
