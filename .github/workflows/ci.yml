name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Check for merge conflict markers
        run: |
          if git grep -n '<<<<<<<\|=======\|>>>>>>>' -- ':!*.lock'; then
            echo '::error::Merge conflict markers detected. Please resolve before running CI.'
            exit 1
          else
            echo 'No merge conflict markers found.'
          fi

      - name: Build workspaces
        run: pnpm -r build

      - name: Run tests
        run: pnpm -r test

      - name: Run accessibility tests
        run: pnpm --filter @apgms/webapp test:axe

      - name: Prisma migrate status
        run: |
          if find . -name "schema.prisma" -print -quit | grep -q .; then
            echo 'Prisma schema detected. Checking migrate status...'
            output=$(pnpm -r exec prisma migrate status 2>&1) || status=$?
            echo "$output"
            if [ -n "${status:-}" ] && [ "${status}" -ne 0 ]; then
              if echo "$output" | grep -qiE 'not found|ENOENT'; then
                echo '::warning::Prisma CLI not available; skipping migrate status.'
              else
                exit "${status}"
              fi
            fi
          else
            echo 'No Prisma schema found. Skipping Prisma migrate status.'
          fi

  lighthouse:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build webapp
        run: pnpm --filter @apgms/webapp build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: ./lighthouserc.json
          runs: 1
          uploadArtifacts: true

  prisma-drift:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Prisma schema
        id: detect_prisma
        shell: bash
        run: |
          if find . -name "schema.prisma" -print -quit | grep -q .; then
            echo "Prisma schema detected. Enabling drift check."
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "No Prisma schema found. Skipping Prisma drift check."
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup PNPM
        if: steps.detect_prisma.outputs.found == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        if: steps.detect_prisma.outputs.found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache Prisma engines
        if: steps.detect_prisma.outputs.found == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        if: steps.detect_prisma.outputs.found == 'true'
        run: pnpm install --frozen-lockfile

      - name: Run Prisma migrate status
        if: steps.detect_prisma.outputs.found == 'true'
        run: pnpm -r exec prisma migrate status
